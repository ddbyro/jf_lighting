<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/custom_components/jellyfish_lighting/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/custom_components/jellyfish_lighting/__init__.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Jellyfish Lighting Home Assistant Integration&#10;&quot;&quot;&quot;&#10;&#10;import logging&#10;from homeassistant.core import HomeAssistant&#10;from homeassistant.helpers.typing import ConfigType&#10;from homeassistant.helpers.entity import Entity&#10;&#10;_LOGGER = logging.getLogger(__name__)&#10;&#10;DOMAIN = &quot;jellyfish_lighting&quot;&#10;&#10;async def async_setup(hass: HomeAssistant, config: ConfigType) -&gt; bool:&#10;    &quot;&quot;&quot;&#10;    Set up the Jellyfish Lighting integration.&#10;    &quot;&quot;&quot;&#10;    # Placeholder for setup logic&#10;    _LOGGER.info(&quot;Setting up Jellyfish Lighting integration&quot;)&#10;    return True&#10;&#10;async def async_setup_entry(hass: HomeAssistant, entry) -&gt; bool:&#10;    try:&#10;        # Try modern method first&#10;        if hasattr(hass.config_entries, &quot;async_forward_entry_setup&quot;):&#10;            await hass.config_entries.async_forward_entry_setup(entry, &quot;light&quot;)&#10;        # Fallback for older HA versions&#10;        elif hasattr(hass, &quot;async_create_task&quot;) and hasattr(hass.config_entries, &quot;async_forward_entry_setups&quot;):&#10;            hass.async_create_task(hass.config_entries.async_forward_entry_setups([entry], &quot;light&quot;))&#10;        else:&#10;            # Last fallback: store config entry data for platform setup&#10;            hass.data.setdefault(DOMAIN, {})[entry.entry_id] = entry.data&#10;        return True&#10;    except Exception as e:&#10;        _LOGGER.error(f&quot;Error setting up Jellyfish Lighting entry: {e}&quot;)&#10;        return False&#10;&#10;async def async_unload_entry(hass: HomeAssistant, entry) -&gt; bool:&#10;    unload = getattr(hass, &quot;async_forward_entry_unload&quot;, None)&#10;    if unload:&#10;        return await unload(entry, &quot;light&quot;)&#10;    if DOMAIN in hass.data:&#10;        hass.data[DOMAIN].pop(entry.entry_id, None)&#10;    return True&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Jellyfish Lighting Home Assistant Integration&#10;&quot;&quot;&quot;&#10;&#10;import logging&#10;from homeassistant.core import HomeAssistant&#10;from homeassistant.helpers.typing import ConfigType&#10;from homeassistant.helpers.entity import Entity&#10;&#10;_LOGGER = logging.getLogger(__name__)&#10;&#10;DOMAIN = &quot;jellyfish_lighting&quot;&#10;&#10;async def async_setup(hass: HomeAssistant, config: ConfigType) -&gt; bool:&#10;    &quot;&quot;&quot;&#10;    Set up the Jellyfish Lighting integration.&#10;    &quot;&quot;&quot;&#10;    # Placeholder for setup logic&#10;    _LOGGER.info(&quot;Setting up Jellyfish Lighting integration&quot;)&#10;    return True&#10;&#10;async def async_setup_entry(hass: HomeAssistant, entry) -&gt; bool:&#10;    try:&#10;        # Try modern method first&#10;        if hasattr(hass.config_entries, &quot;async_forward_entry_setup&quot;):&#10;            await hass.config_entries.async_forward_entry_setup(entry, &quot;light&quot;)&#10;        else:&#10;            # Fallback: store config entry data for platform setup&#10;            hass.data.setdefault(DOMAIN, {})[entry.entry_id] = entry.data&#10;        return True&#10;    except Exception as e:&#10;        _LOGGER.error(f&quot;Error setting up Jellyfish Lighting entry: {e}&quot;)&#10;        return False&#10;&#10;async def async_unload_entry(hass: HomeAssistant, entry) -&gt; bool:&#10;    unload = getattr(hass, &quot;async_forward_entry_unload&quot;, None)&#10;    if unload:&#10;        return await unload(entry, &quot;light&quot;)&#10;    if DOMAIN in hass.data:&#10;        hass.data[DOMAIN].pop(entry.entry_id, None)&#10;    return True" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>