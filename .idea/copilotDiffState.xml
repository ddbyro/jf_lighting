<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/custom_components/jellyfish_lighting/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/custom_components/jellyfish_lighting/__init__.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Jellyfish Lighting Home Assistant Integration&#10;&quot;&quot;&quot;&#10;&#10;import logging&#10;from homeassistant.core import HomeAssistant&#10;from homeassistant.helpers.typing import ConfigType&#10;from homeassistant.helpers.entity import Entity&#10;&#10;_LOGGER = logging.getLogger(__name__)&#10;&#10;DOMAIN = &quot;jellyfish_lighting&quot;&#10;&#10;async def async_setup(hass: HomeAssistant, config: ConfigType) -&gt; bool:&#10;    &quot;&quot;&quot;&#10;    Set up the Jellyfish Lighting integration.&#10;    &quot;&quot;&quot;&#10;    # Placeholder for setup logic&#10;    _LOGGER.info(&quot;Setting up Jellyfish Lighting integration&quot;)&#10;    return True&#10;&#10;async def async_setup_entry(hass: HomeAssistant, entry) -&gt; bool:&#10;    &quot;&quot;&quot;&#10;    Store config entry data for platform setup.&#10;    &quot;&quot;&quot;&#10;    hass.data.setdefault(DOMAIN, {})[entry.entry_id] = entry.data&#10;    return True&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Jellyfish Lighting Home Assistant Integration&#10;&quot;&quot;&quot;&#10;&#10;import logging&#10;from homeassistant.core import HomeAssistant&#10;from homeassistant.helpers.typing import ConfigType&#10;from homeassistant.helpers.entity import Entity&#10;&#10;_LOGGER = logging.getLogger(__name__)&#10;&#10;DOMAIN = &quot;jellyfish_lighting&quot;&#10;&#10;async def async_setup(hass: HomeAssistant, config: ConfigType) -&gt; bool:&#10;    &quot;&quot;&quot;&#10;    Set up the Jellyfish Lighting integration.&#10;    &quot;&quot;&quot;&#10;    # Placeholder for setup logic&#10;    _LOGGER.info(&quot;Setting up Jellyfish Lighting integration&quot;)&#10;    return True&#10;&#10;async def async_setup_entry(hass: HomeAssistant, entry) -&gt; bool:&#10;    try:&#10;        # Try to forward config entry to the light platform (modern HA)&#10;        forward = getattr(hass, &quot;async_forward_entry_setup&quot;, None)&#10;        if forward:&#10;            await forward(entry, &quot;light&quot;)&#10;        else:&#10;            # Fallback: store config entry data for platform setup&#10;            hass.data.setdefault(DOMAIN, {})[entry.entry_id] = entry.data&#10;        return True&#10;    except Exception as e:&#10;        _LOGGER.error(f&quot;Error setting up Jellyfish Lighting entry: {e}&quot;)&#10;        return False&#10;&#10;async def async_unload_entry(hass: HomeAssistant, entry) -&gt; bool:&#10;    unload = getattr(hass, &quot;async_forward_entry_unload&quot;, None)&#10;    if unload:&#10;        return await unload(entry, &quot;light&quot;)&#10;    hass.data[DOMAIN].pop(entry.entry_id, None)&#10;    return True" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/custom_components/jellyfish_lighting/api.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/custom_components/jellyfish_lighting/api.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Jellyfish Lighting API Client&#10;&quot;&quot;&quot;&#10;import aiohttp&#10;import logging&#10;&#10;_LOGGER = logging.getLogger(__name__)&#10;&#10;class JellyfishLightingAPI:&#10;    def __init__(self, host: str, api_key: str = None):&#10;        self.host = host&#10;        self.api_key = api_key&#10;        self.base_url = f&quot;http://{host}/api&quot;&#10;        self.session = aiohttp.ClientSession()&#10;&#10;    async def _request(self, method, endpoint, **kwargs):&#10;        url = f&quot;{self.base_url}/{endpoint}&quot;&#10;        headers = {}&#10;        if self.api_key:&#10;            headers[&quot;Authorization&quot;] = f&quot;Bearer {self.api_key}&quot;&#10;        try:&#10;            async with self.session.request(method, url, headers=headers, **kwargs) as resp:&#10;                resp.raise_for_status()&#10;                return await resp.json()&#10;        except Exception as e:&#10;            _LOGGER.error(f&quot;API request error: {e}&quot;)&#10;            return None&#10;&#10;    async def get_status(self):&#10;        return await self._request(&quot;GET&quot;, &quot;status&quot;)&#10;&#10;    async def set_power(self, on: bool):&#10;        return await self._request(&quot;POST&quot;, &quot;power&quot;, json={&quot;on&quot;: on})&#10;&#10;    async def set_color(self, r: int, g: int, b: int):&#10;        return await self._request(&quot;POST&quot;, &quot;color&quot;, json={&quot;r&quot;: r, &quot;g&quot;: g, &quot;b&quot;: b})&#10;&#10;    async def set_effect(self, effect_name: str, params: dict = None):&#10;        data = {&quot;effect&quot;: effect_name}&#10;        if params:&#10;            data.update(params)&#10;        return await self._request(&quot;POST&quot;, &quot;effect&quot;, json=data)&#10;&#10;    async def get_effects(self):&#10;        return await self._request(&quot;GET&quot;, &quot;effects&quot;)&#10;&#10;    async def close(self):&#10;        await self.session.close()&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/custom_components/jellyfish_lighting/config_flow.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/custom_components/jellyfish_lighting/config_flow.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Config flow for Jellyfish Lighting integration&#10;&quot;&quot;&quot;&#10;import voluptuous as vol&#10;from homeassistant import config_entries&#10;from homeassistant.const import CONF_HOST, CONF_API_KEY&#10;from .const import DOMAIN&#10;&#10;class JellyfishLightingConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):&#10;    VERSION = 1&#10;    async def async_step_user(self, user_input=None):&#10;        errors = {}&#10;        if user_input is not None:&#10;            # Optionally: Validate connection here&#10;            return self.async_create_entry(title=&quot;Jellyfish Lighting&quot;, data=user_input)&#10;        return self.async_show_form(&#10;            step_id=&quot;user&quot;,&#10;            data_schema=vol.Schema({&#10;                vol.Required(CONF_HOST): str,&#10;                vol.Optional(CONF_API_KEY): str,&#10;            }),&#10;            errors=errors,&#10;        )&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Config flow for Jellyfish Lighting integration&#10;&quot;&quot;&quot;&#10;import voluptuous as vol&#10;from homeassistant import config_entries&#10;from homeassistant.const import CONF_HOST, CONF_API_KEY&#10;from .const import DOMAIN&#10;&#10;class JellyfishLightingConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):&#10;    VERSION = 1&#10;    async def async_step_user(self, user_input=None):&#10;        errors = {}&#10;        if user_input is not None:&#10;            # Optionally: Validate connection here&#10;            return self.async_create_entry(title=&quot;Jellyfish Lighting&quot;, data=user_input)&#10;        return self.async_show_form(&#10;            step_id=&quot;user&quot;,&#10;            data_schema=vol.Schema({&#10;                vol.Required(CONF_HOST): str,&#10;                vol.Optional(CONF_API_KEY): str,&#10;            }),&#10;            errors=errors,&#10;        )" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/custom_components/jellyfish_lighting/const.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/custom_components/jellyfish_lighting/const.py" />
              <option name="updatedContent" value="DOMAIN = &quot;jellyfish_lighting&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/custom_components/jellyfish_lighting/light.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/custom_components/jellyfish_lighting/light.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Jellyfish Lighting Light Entity for Home Assistant&#10;&quot;&quot;&quot;&#10;import logging&#10;from homeassistant.components.light import LightEntity, SUPPORT_COLOR, SUPPORT_EFFECT&#10;from homeassistant.const import CONF_HOST, CONF_API_KEY&#10;from .api import JellyfishLightingAPI&#10;&#10;_LOGGER = logging.getLogger(__name__)&#10;&#10;async def async_setup_platform(hass, config, async_add_entities, discovery_info=None):&#10;    host = config.get(CONF_HOST)&#10;    api_key = config.get(CONF_API_KEY)&#10;    api = JellyfishLightingAPI(host, api_key)&#10;    async_add_entities([JellyfishLight(api)])&#10;&#10;async def async_setup_entry(hass, entry, async_add_entities):&#10;    host = entry.data.get(&quot;host&quot;)&#10;    api_key = entry.data.get(&quot;api_key&quot;)&#10;    api = JellyfishLightingAPI(host, api_key)&#10;    async_add_entities([JellyfishLight(api)])&#10;&#10;class JellyfishLight(LightEntity):&#10;    def __init__(self, api: JellyfishLightingAPI):&#10;        self._api = api&#10;        self._is_on = False&#10;        self._rgb_color = (255, 255, 255)&#10;        self._effect = None&#10;        self._available_effects = []&#10;        self._name = &quot;Jellyfish Lighting&quot;&#10;&#10;    @property&#10;    def name(self):&#10;        return self._name&#10;&#10;    @property&#10;    def is_on(self):&#10;        return self._is_on&#10;&#10;    @property&#10;    def rgb_color(self):&#10;        return self._rgb_color&#10;&#10;    @property&#10;    def effect_list(self):&#10;        return self._available_effects&#10;&#10;    @property&#10;    def effect(self):&#10;        return self._effect&#10;&#10;    @property&#10;    def supported_features(self):&#10;        return SUPPORT_COLOR | SUPPORT_EFFECT&#10;&#10;    async def async_turn_on(self, **kwargs):&#10;        if &quot;rgb_color&quot; in kwargs:&#10;            r, g, b = kwargs[&quot;rgb_color&quot;]&#10;            await self._api.set_color(r, g, b)&#10;            self._rgb_color = (r, g, b)&#10;        if &quot;effect&quot; in kwargs:&#10;            await self._api.set_effect(kwargs[&quot;effect&quot;])&#10;            self._effect = kwargs[&quot;effect&quot;]&#10;        await self._api.set_power(True)&#10;        self._is_on = True&#10;        await self.async_update()&#10;&#10;    async def async_turn_off(self, **kwargs):&#10;        await self._api.set_power(False)&#10;        self._is_on = False&#10;        await self.async_update()&#10;&#10;    async def async_update(self):&#10;        status = await self._api.get_status()&#10;        if status:&#10;            self._is_on = status.get(&quot;on&quot;, self._is_on)&#10;            color = status.get(&quot;color&quot;, {})&#10;            self._rgb_color = (&#10;                color.get(&quot;r&quot;, 255),&#10;                color.get(&quot;g&quot;, 255),&#10;                color.get(&quot;b&quot;, 255)&#10;            )&#10;            self._effect = status.get(&quot;effect&quot;, self._effect)&#10;        effects = await self._api.get_effects()&#10;        if effects:&#10;            self._available_effects = effects.get(&quot;effects&quot;, [])&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Jellyfish Lighting Light Entity for Home Assistant&#10;&quot;&quot;&quot;&#10;import logging&#10;from homeassistant.components.light import LightEntity, SUPPORT_COLOR, SUPPORT_EFFECT&#10;from homeassistant.const import CONF_HOST, CONF_API_KEY&#10;from .api import JellyfishLightingAPI&#10;from .const import DOMAIN&#10;&#10;_LOGGER = logging.getLogger(__name__)&#10;&#10;async def async_setup_platform(hass, config, async_add_entities, discovery_info=None):&#10;    host = config.get(CONF_HOST)&#10;    api_key = config.get(CONF_API_KEY)&#10;    api = JellyfishLightingAPI(host, api_key)&#10;    async_add_entities([JellyfishLight(api)])&#10;&#10;async def async_setup_entry(hass, entry, async_add_entities):&#10;    entry_data = hass.data[DOMAIN][entry.entry_id]&#10;    host = entry_data.get(&quot;host&quot;)&#10;    api_key = entry_data.get(&quot;api_key&quot;)&#10;    api = JellyfishLightingAPI(host, api_key)&#10;    async_add_entities([JellyfishLight(api)])&#10;&#10;class JellyfishLight(LightEntity):&#10;    def __init__(self, api: JellyfishLightingAPI):&#10;        self._api = api&#10;        self._is_on = False&#10;        self._rgb_color = (255, 255, 255)&#10;        self._effect = None&#10;        self._available_effects = []&#10;        self._name = &quot;Jellyfish Lighting&quot;&#10;&#10;    @property&#10;    def name(self):&#10;        return self._name&#10;&#10;    @property&#10;    def is_on(self):&#10;        return self._is_on&#10;&#10;    @property&#10;    def rgb_color(self):&#10;        return self._rgb_color&#10;&#10;    @property&#10;    def effect_list(self):&#10;        return self._available_effects&#10;&#10;    @property&#10;    def effect(self):&#10;        return self._effect&#10;&#10;    @property&#10;    def supported_features(self):&#10;        return SUPPORT_COLOR | SUPPORT_EFFECT&#10;&#10;    async def async_turn_on(self, **kwargs):&#10;        if &quot;rgb_color&quot; in kwargs:&#10;            r, g, b = kwargs[&quot;rgb_color&quot;]&#10;            await self._api.set_color(r, g, b)&#10;            self._rgb_color = (r, g, b)&#10;        if &quot;effect&quot; in kwargs:&#10;            await self._api.set_effect(kwargs[&quot;effect&quot;])&#10;            self._effect = kwargs[&quot;effect&quot;]&#10;        await self._api.set_power(True)&#10;        self._is_on = True&#10;        await self.async_update()&#10;&#10;    async def async_turn_off(self, **kwargs):&#10;        await self._api.set_power(False)&#10;        self._is_on = False&#10;        await self.async_update()&#10;&#10;    async def async_update(self):&#10;        status = await self._api.get_status()&#10;        if status:&#10;            self._is_on = status.get(&quot;on&quot;, self._is_on)&#10;            color = status.get(&quot;color&quot;, {})&#10;            self._rgb_color = (&#10;                color.get(&quot;r&quot;, 255),&#10;                color.get(&quot;g&quot;, 255),&#10;                color.get(&quot;b&quot;, 255)&#10;            )&#10;            self._effect = status.get(&quot;effect&quot;, self._effect)&#10;        effects = await self._api.get_effects()&#10;        if effects:&#10;            self._available_effects = effects.get(&quot;effects&quot;, [])" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/custom_components/jellyfish_lighting/manifest.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/custom_components/jellyfish_lighting/manifest.json" />
              <option name="originalContent" value="{&#10;  &quot;domain&quot;: &quot;jellyfish_lighting&quot;,&#10;  &quot;name&quot;: &quot;Jellyfish Lighting&quot;,&#10;  &quot;documentation&quot;: &quot;https://github.com/parkerjfl/JellyfishLightingAPIExplorer/blob/main/Jellyfish%20Lighting%20API%20Documentation%20(1).pdf&quot;,&#10;  &quot;requirements&quot;: [],&#10;  &quot;dependencies&quot;: [],&#10;  &quot;codeowners&quot;: [&quot;@your-github-username&quot;],&#10;  &quot;config_flow&quot;: true,&#10;  &quot;version&quot;: &quot;0.1.0&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;domain&quot;: &quot;jellyfish_lighting&quot;,&#10;  &quot;name&quot;: &quot;Jellyfish Lighting&quot;,&#10;  &quot;documentation&quot;: &quot;https://github.com/parkerjfl/JellyfishLightingAPIExplorer/blob/main/Jellyfish%20Lighting%20API%20Documentation%20(1).pdf&quot;,&#10;  &quot;requirements&quot;: [],&#10;  &quot;dependencies&quot;: [],&#10;  &quot;codeowners&quot;: [&quot;@your-github-username&quot;],&#10;  &quot;config_flow&quot;: true,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;platforms&quot;: [&quot;light&quot;]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>